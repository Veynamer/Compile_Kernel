name: "Compile kernel Unisoc GKI"

on:
  workflow_dispatch:
    inputs:
      AUTHOR:
        description: 'AUTHOR'
        required: true
        default: 'Veynamer'   
      CHECKOUT_REPO:
        description: 'CHECKOUT_REPO'
        required: true
        default: 'kernel_ums512_5.4'
      CHECKOUT_BRANCH:
        description: 'CHECKOUT_BRANCH'
        required: true
        default: 'master'
      USEDEFCONFIG:
        description: 'USEDEFCONFIG'
        required: true
        default: 'unisoc_fuzz_ums512_defconfig'

env:
  CLANG_VER: 'clang-r416183b'
  ARCHOSUB: 'arm64'
  KERNEL_DIR: 'kernel_source'
  COMPILE_THREAD: '32'

jobs:
  kernel:
    name: Compile kernel
    runs-on: ubuntu-latest
    steps:
    - name: Cache Clang
      id: cacheClang
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/${{ env.CLANG_VER }}
        key: ${{ runner.os }}/${{ env.CLANG_VER }}

    - name: Get time
      id: get_time
      run: |
        echo "actions_time=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Check out the repository
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.AUTHOR }}/${{ github.event.inputs.CHECKOUT_REPO }}
        ref: ${{ github.event.inputs.CHECKOUT_BRANCH }}
        path: ${{ env.KERNEL_DIR }}

    - name: Check out the compiler
      if: steps.cacheClang.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: llvm/llvm-project
        path: ${{ env.CLANG_VER }}
        ref: 'release/13.x'

    - name: Pull template
      uses: actions/checkout@v3
      with:
        path: Anykernel

    - name: Prepare the compilation environment
      run: |
        sudo apt update -y
        sudo apt install -y git wget unzip p7zip-full

    - name: Compiling
      run: |
        cd ${{ github.workspace }}/${{ env.KERNEL_DIR }}
        export ARCH=${{ env.ARCHOSUB }}
        export CC=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/clang
        export CROSS_COMPILE=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/aarch64-linux-gnu-
        export PATH="${{ github.workspace }}/${{ env.CLANG_VER }}/bin:$PATH"

        # Use GKI-specific make commands
        make O=out ${{ github.event.inputs.USEDEFCONFIG }}

        make -j${{ env.COMPILE_THREAD }} O=out \
        CC=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/clang \
        CROSS_COMPILE=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/aarch64-linux-gnu- \
        ARCH=${{ env.ARCHOSUB }} \
        SUBARCH=${{ env.ARCHOSUB }}

    - name: Packaged kernel
      run: |
        cd ${{ github.workspace }}/Anykernel
        cp ${{ github.workspace }}/${{ env.KERNEL_DIR }}/out/arch/arm64/boot/Image.gz-dtb ${{ github.workspace }}/Anykernel/
        zip -u Kernel_template.zip Image.gz-dtb
        cd ${{ github.workspace }}
        mkdir -p kernel_public
        cp ${{ github.workspace }}/Anykernel/Kernel_template.zip ${{ github.workspace }}/kernel_public/${{ env.actions_time }}.zip
    
    - name: Publish to Release
      if: github.event.inputs.USE_LANZOU == '0'
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        title: Release ${{ github.event.inputs.AUTHOR }}/${{ github.event.inputs.CHECKOUT_REPO }}-${{ env.actions_time }}
        files: |
          ${{ github.workspace }}/kernel_public/${{ env.actions_time }}.zip
